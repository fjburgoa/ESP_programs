#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

//PERIODOS TAREAS en ms
#define TASK1_T 200
 
//CONTADORES
#define ITER1 400000

//GPIO SALIDAS Y ENTRADAS DIGITALES
#define STACK_SIZE	64*1024	     //N x 1kByte es el tama√±o de la piLa  

//----------------------------------------------------------------
//--------------Task1--------------------------------------------- 
//----------------------------------------------------------------

void vTaskCode1( void * pvParameters )           
{

    int myvecy[10*1024] ={0};  //parar comprobar que esto se quita del stack de la tarea, no del stack general

    while(1)
    {
       int *puntero_dinamico = (int*)pvPortMalloc(1024*sizeof(int));     
       for (int k=0; k<1000; k++)
            puntero_dinamico[k]  = k;

        myvecy[0] = 3;

       printf("Stack Task: %d, Heap Task: %d\n",uxTaskGetStackHighWaterMark(NULL),xPortGetFreeHeapSize());
       vTaskDelay( 100/portTICK_PERIOD_MS );        
    }	
}


//----------------------------------------------------------------
//-----------------Main loop    ----------------------------------
//----------------------------------------------------------------
void app_main(void) 
{   
    //Crea Handlers
    TaskHandle_t xHandle1 = NULL;  //Handler a la tarea 1
    int ucParameterToPass1 = 0;     //dummy 

    xTaskCreate( vTaskCode1, "TASK1", STACK_SIZE, &ucParameterToPass1, 1, &xHandle1 );  //Prioridad 1

    int *puntero_dinamico;
    int j = 0;

    printf("Stack:  %d\n",uxTaskGetStackHighWaterMark(NULL));

    while (1) 
    {
       //main loop  
/*
        puntero_dinamico = (int*)pvPortMalloc(32*sizeof(int));
        if (puntero_dinamico==NULL)
            printf("no free heap");

        for (int k=0; k<1000; k++)
            puntero_dinamico[k]  = k;

*/

        printf("Stack Main: %d, Heap Main: %d\n",uxTaskGetStackHighWaterMark(NULL),xPortGetFreeHeapSize());



        vTaskDelay(100/portTICK_PERIOD_MS);   //Wait 1 sec
    }
}




 



